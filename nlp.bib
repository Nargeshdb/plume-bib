%% Bibliography for NLP (natural language processing), as applied to
%% software engineering tasks.


@InProceedings{TanYKZ2007,
  author = 	 "Tan, Lin and Yuan, Ding and Krishna, Gopal and Zhou, Yuanyuan",
  title = 	 "/*{iComment}: Bugs or Bad Comments?*/",
  crossref =     "SOSP2007",
  pages = 	 "145--158",
}


@InProceedings{TanZP2011,
  author = 	 "Tan, Lin and Zhou, Yuanyuan and Padioleau, Yoann",
  title = 	 "{aComment}: Mining annotations from comments and code to detect interrupt related concurrency bugs",
  crossref =  "ICSE2011",
  pages = 	 "11--20",
}






@InProceedings{YeSMBL2016,
  author =       "Xin Ye and Hui Shen and Xiao Ma and Razvan Bunescu and Chang Liu",
  title =        "From word embeddings to document similarities for improved information retrieval in software engineering",
  crossref =     "ICSE2016",
  NEEDpages =     "*",
}
































@InProceedings{AllamanisBBS2014,
  author = 	 "Allamanis, Miltiadis and Barr, Earl T. and Bird, Christian and Sutton, Charles",
  title = 	 "Learning natural coding conventions",
  crossref =     "FSE2014",
  pages = 	 "281--293",
}


@InProceedings{PanditaXZXOP2012,
  author = 	 "Pandita, Rahul and Xiao, Xusheng and Zhong, Hao and Xie, Tao and Oney, Stephen and Paradkar, Amit",
  title = 	 "Inferring method specifications from natural language {API} descriptions",
  crossref =     "ICSE2012",
  pages = 	 "815--825",
}












@InProceedings{HindleBSGD2012,
  author = 	 "Hindle, Abram and Barr, Earl T. and Su, Zhendong and Gabel, Mark and Devanbu, Premkumar",
  title = 	 "On the Naturalness of Software",
  crossref =     "ICSE2012",
  pages = 	 "837--847",
}




@InProceedings{HowardGPVS2013,
  author = 	 "Howard, Matthew J. and Gupta, Samir and Pollock, Lori and Vijay-Shanker, K.",
  title = 	 "Automatically mining software-based, semantically-similar words from comment-code mappings",
  crossref =     "MSR2013",
  pages = 	 "377--386",
}


@InProceedings{GuptaMPVS2013,
  author = 	 "Samir Gupta and Sana Malik and Lori Pollock and K. Vijay-Shanker",
  title = 	 "Part-of-speech tagging of program identifiers for improved text-based software engineering tools",
  crossref =     "ICPC2013",
  pages = 	 "3--12",
}


@InProceedings{SridharaHMPVS2010,
  author = 	 "Sridhara, Giriprasad and Hill, Emily and Muppaneni, Divya and Pollock, Lori and Vijay-Shanker, K.",
  title = 	 "Towards automatically generating summary comments for {Java} methods",
  crossref =     "ASE2010",
  pages = 	 "43--52",
}


@InProceedings{HillFBSNPV2008,
  author = 	 "Hill, Emily and Fry, Zachary P. and Boyd, Haley and Sridhara, Giriprasad and Novikova, Yana and Pollock, Lori and Vijay-Shanker, K.",
  title = 	 "{AMAP}: Automatically mining abbreviation expansions in programs to enhance software maintenance tools",
  crossref =     "MSR2008",
  pages = 	 "79--88",
}















































@InProceedings{ArnaoudovaEOGA2010,
  author = 	 "Arnaoudova, Venera and Eshkevari, Laleh and Oliveto, Rocco and Gueheneuc, Yann-Gael and Antoniol, Giuliano",
  title = 	 "Physical and conceptual identifier dispersion: Measures and relation to fault proneness",
  crossref =     "ICSM2010",
  pages = 	 "1--5",
}




@Article{LawrieMFB2007,
  author = 	 "Lawrie, Dawn and Morrell, Christopher and Feild, Henry and Binkley, David",
  title = 	 "Effective identifier names for comprehension and memory",
  journal = 	 "Innovations in Systems and Software Engineering",
  year = 	 2007,
  volume = 	 3,
  number = 	 4,
  pages = 	 "303--318",
  month = 	 dec,
  abstract =
   "Readers of programs have two main sources of domain information:
    identifier names and comments. When functions are uncommented, as many are,
    comprehension is almost exclusively dependent on the identifier
    names. Assuming that writers of programs want to create quality identifiers
    (e.g., identifiers that include relevant domain knowledge), one must ask
    how should they go about it. For example, do the initials of a concept name
    provide enough information to represent the concept? If not, and a longer
    identifier is needed, is an abbreviation satisfactory or does the concept
    need to be captured in an identifier that includes full words? What is the
    effect of longer identifiers on limited short term memory capacity? Results
    from a study designed to investigate these questions are reported. The
    study involved over 100 programmers who were asked to describe 12 different
    functions and then recall identifiers that appeared in each function. The
    functions used three different levels of identifiers: single letters,
    abbreviations, and full words. Responses allow the extent of comprehension
    associated with the different levels to be studied along with their impact
    on memory. The functions used in the study include standard computer
    science textbook algorithms and functions extracted from production
    code. The results show that full-word identifiers lead to the best
    comprehension; however, in many cases, there is no statistical difference
    between using full words and abbreviations. When considered in the light of
    limited human short-term memory, well-chosen abbreviations may be
    preferable in some situations since identifiers with fewer syllables are
    easier to remember.",
}


@Article{DeissenboeckP2006,
  author = 	 "Deissenboeck, Florian and Pizka, Markus",
  title = 	 "Concise and consistent naming",
  journal = 	 "Software Quality Journal",
  year = 	 2006,
  volume = 	 14,
  number = 	 3,
  pages = 	 "261--282",
  month = 	 sep,
}


@InProceedings{MihalceaCS2006,
  author = 	 "Mihalcea, Rada and Corley, Courtney and Strapparava, Carlo",
  title = 	 "Corpus-based and knowledge-based measures of text semantic similarity",
  crossref =     "AAAI2006",
  pages = 	 "775--780",
}


@InProceedings{LawrieMB2010,
  author = 	 "Dawn Lawrie and Christopher Morrell and Dave Binkley",
  title = 	 "Normalizing source code vocabulary",
  crossref =     "WCRE2010",
  pages = 	 "3-12",
}




@InProceedings{MotwaniBrun2019,
  author = 	 "Motwani, Manish and Brun, Yuriy",
  title = 	 "Automatically Generating Precise Oracles from Structured Natural Language Specifications",
  crossref =  "ICSE2019",
  pages = 	 "188--199",
}

@InProceedings{HuLXLJ2018,
  author = 	 "Hu, Xing and Li, Ge and Xia, Xin and Lo, David and Jin, Zhi",
  title = 	 "Deep code comment generation",
  crossref =  "ICPC2018",
  pages = 	 "200--210",
}


@Misc{LouisDBS2018,
  author = 	 "Annie Louis and Santanu Kumar Dash and Earl T. Barr and Charles Sutton",
  title = 	 "Deep Learning to Detect Redundant Method Comments",
  howpublished = "\url{http://arxiv.org/abs/1806.04616}",
  month = 	 jun,
  year = 	 2018,
}


@InProceedings{MikolovSCCD2013,
  author = 	 "Mikolov, Tomas and Sutskever, Ilya and Chen, Kai and Corrado, Greg and Dean, Jeffrey",
  title = 	 "Distributed representations of words and phrases and their compositionality",
  crossref =  "NIPS2013",
  pages = 	 "3111--3119",
}

@InProceedings{MovshovitzAttiasC2013,
  author = 	 "Movshovitz-Attias, Dana  and  Cohen, William W.",
  title = 	 "Natural language models for predicting programming comments",
  crossref =  "ACL2013short",
  pages = 	 "35--40",
}

@InProceedings{BuzeW2010,
  author = 	 "Buse, Raymond P.L. and Weimer, Westley R.",
  title = 	 "Automatically documenting program changes",
  crossref =  "ASE2010",
  pages = 	 "33-42",
}

@InProceedings{PascarellaB2017,
  author = 	 "Pascarella, Luca and Bacchelli, Alberto",
  title = 	 "Classifying code comments in {Java} open-source software systems",
  crossref =  "MSR2017",
  pages = 	 "227-237",
  supersededby = "PascarellaBB2019"
}

@Article{PascarellaBB2019,
  author = 	 "Pascarella, Luca and Bruntink, Magiel and Bacchelli, Alberto",
  title = 	 "Classifying code comments in {Java} software systems",
  journal = 	 JEmpiricalSE,
  year = 	 2019,
  volume = 	 24,
  number = 	 3,
  pages = 	 "1499-1537",
  month = 	 jun,
}



%  LocalWords:  InProceedings TanYKZ2007 Gopal Zhou Yuanyuan iComment Iyer
%  LocalWords:  booktitle SOSP2007 SOSP2007date SOSP2007addr Benwen NN pre
%  LocalWords:  testEntrySetClearChangesMap Srinivasan Ioannis Konstas Xin
%  LocalWords:  testSettingHeightThatIsTooSmallLeavesHeightUnchanged LSTM
%  LocalWords:  Zettlemoyer YeSMBL2016 Shen Xiao Razvan Bunescu Liu MRR Za
%  LocalWords:  ICSE2016 NEEDpages ICSE2016date ICSE2016addr Wiki LSA CCG
%  LocalWords:  stemmer Kushman Barzilay Turkers regex regexes Mise Kiddon
%  LocalWords:  Ganesa Thandavam Ponnuraj Yejin Choi Branavan Miltiadis xj
%  LocalWords:  Allamanis AAAI Briand Briand's Hirschberg uncompelling xk
%  LocalWords:  Movshovitz Attias ICPC preprocess pickaxe xl Convolutional
%  LocalWords:  Hao Peng ie camelcase tokenizer Naturalize's
