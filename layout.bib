%%% Bibliography on representation transformations, data layout decisions,
%%% structure/pointer inlining, and unboxing.



@InProceedings{ICFP::DimockMTW1997,
  title =        "Strongly Typed Flow-Directed Representation
                 Transformations (Extended Abstract)",
  author =       "Allyn Dimock and Robert Muller and Franklyn Turbak and
                 J. B. Wells",
  pages =        "11--24",
  booktitle =    "Proceedings of the 1997 {ACM} {SIGPLAN} International
                 Conference on Functional Programming",
  month =        "9--11 " # jun,
  year =         "1997",
  address =      "Amsterdam, The Netherlands",
  references =   "\cite{POPL::AikenWL1994} \cite{POPL::AppelJ1989}
                 \cite{IC::BarbaneraDL1995}
                 \cite{POPL::JagannathanW1995}
                 \cite{PLDI::JagannathanW1996} \cite{POPL::Jim1996}
                 \cite{LICS::KfouryW1995} \cite{POPL::MinamideMH1996}
                 \cite{POPL::WandS1994}",
}



@InProceedings{popl92*177,
  author =       "Xavier Leroy",
  title =        "Unboxed Objects and Polymorphic Typing",
  pages =        "177--188",
  ISBN =         "0-89791-453-8 /0-89791-453-8",
  editor =       "Ravi Sethi",
  booktitle =    "Proceedings of the 19th Annual Symposium on Principles
                 of Programming Languages",
  address =      "Albuquerque, NM",
  month =        jan,
  year =         "1992",
  publisher =    "ACM Press",
}


@InProceedings{PLDI::ShaoA1995,
  title =        "A Type-Based Compiler for Standard {ML}",
  author =       "Zhong Shao and Andrew W. Appel",
  booktitle =    "Proceedings of the {ACM} {SIGPLAN}'95 Conference on
                 Programming Language Design and Implementation
                 ({PLDI})",
  address =      "La Jolla, California",
  month =        "18--21~" # jun,
  year =         "1995",
  pages =        "116--129",
}


@InProceedings{PLDI::TarditiMCSHL1996,
  title =        "{TIL}: {A} Type-Directed Optimizing Compiler for
                 {ML}",
  author =       "D. Tarditi and G. Morrisett and P. Cheng and C. Stone
                 and R. Harper and P. Lee",
  pages =        "181--192",
  booktitle =    "Proceedings of the {ACM} {SIGPLAN}~'96 Conference on
                 Programming Language Design and Implementation",
  month =        "21--24~" # may,
  year =         "1996",
  address =      "Philadelphia, Pennsylvania",
  references =   "\cite{JFP::Appel1993} \cite{POPL::DemersWHBBS1990}
                 \cite{ACMTCS::DiwanTM1995} \cite{POPL::HarperL1994}
                 \cite{POPL::HarperM1995} \cite{POPL::HengleinJ1994}
                 \cite{POPL::Leroy1992} \cite{POPL::Leroy1994}
                 \cite{POPL::MinamideMH1996}
                 \cite{TOPLAS::MorrisonDCB1991}",
}


@InProceedings{AdamsCurSpr93,
  author =       "Norman Adams and Pavel Curtis and Mike Spreitzer",
  title =        "First-Class Data-Type Representations in {\sc
                 SchemeXerox}",
  booktitle =    "Proceedings of the {ACM} {SIGPLAN} '93 Conference on
                 Programming Language Design and Implementation",
  address =      "Albuquerque, New Mexico",
  month =        jun # " 23--25,",
  year =         "1993",
  pages =        "139--146",
}




@TechReport{AuerbachCC97,
  author = 	 "Joshua Auerbach and Mark C. Chu-Carroll",
  title = 	 "The Mockingbird System: A Compiler-based Approach to
		  Maximally Interoperable Distributed Programming",
  institution =  "IBM Research Division",
  year = 	 1997,
  type =	 "IBM Research Report",
  number =	 "RC 20718",
  address =	 "Yorktown Heights, NY",
  month =	 feb # "~5,",
  abstract = 	 "We describe Mockingbird, a set of distributed programming
		  tools to enable interoperation across languages that avoids
		  many of the complexities of IDL-based programming.
		  Mockingbird employs a new correctness criterion known as
		  interconvertibility to achieve a richer set of mappings
		  between different type systems. An intermediate
		  representation, MockSL, captures interconvertibility and
		  mediates stub compilation. We use a multi-language
		  programming example both to illustrate deficiencies in
		  previous techniques and to show how Mockingbird achieves
		  its goal."
}



@InProceedings{Robinson96,
  author = 	 "Arch D. Robison",
  title = 	 "The Abstraction Penalty for Small Objects in C++",
  booktitle = 	 "{POOMA} '96: The 1996 Parallel Object-Oriented Methods and Applications Conference",
  year =	 1996,
  address =	 "Santa Fe, NM",
  month =	 feb # "~28--" # mar # "~1,",
  abstract = 	 "This talk describes various benchmarks that measure the
		  performance of small objects, why they are important to
		  high-performance computing, and how the state of the art
		  for compiling small objects has improved in the last few
		  years. The improvements in node performance are
		  equivalent to doubling to quadrupling the number of nodes
		  in a parallel system.",
  URL =		 "http://www.acl.lanl.gov/Pooma96/abstracts/robison.html"
}


@InProceedings{pldi97*7,
  author =       "Julian Dolby",
  title =        "Automatic Inline Allocation of Objects",
  pages =        "7--17",
  ISSN =         "0362-1340",
  booktitle =    "Proceedings of the {ACM} {SIGPLAN} Conference on
                 Programming Language Design and Implementation
                 ({PLDI}-97)",
  month =        jun # "15--18~",
  series =       "ACM SIGPLAN Notices",
  volume =       "32, 5",
  publisher =    "ACM Press",
  address =      "New York",
  year =         "1997",
}


@Article{JLOGP::SomogyiHC1996,
  title =        "The Execution Algorithm of {Mercury}, an Efficient
                 Purely Declarative Logic Programming Language",
  author =       "Zoltan Somogyi and Fergus Henderson and Thomas
                 Conway",
  journal =      "Journal of Logic Programming",
  pages =        "17--64",
  year =         "1996",
  month =        oct # "--" # nov,
  volume =       "29",
  number =       "1--3",
}



@InProceedings{Peterson93,
  author =       "J. Peterson and M. Jones",
  title =        "Implementing Type Classes",
  booktitle =    "ACM SIGPLAN '93 Conference on Programming Language
                 Design and Implementation",
  pages =        "227--36",
  year =         "1993",
  keywords =     "functional haskell",
  abstract =     "A description is given of the implementation of a type
                 checker for the functional programming language Haskell
                 that supports the use of type classes. This extends the
                 type system of ML to support overloading (ad-hoc
                 polymorphism) and can be used to implement features
                 such as equality types and numeric overloading in a
                 simple and general way. The theory of type classes is
                 well understood, but the practical issues involved in
                 the implementation of such systems have not received a
                 great deal of attention. In addition to the basic type
                 checking algorithm, an implementation of type classes
                 also requires some form of program transformation. In
                 all current Haskell compilers this takes the form of
                 dictionary conversion, using functions as hidden
                 parameters to overloaded values. The authors present
                 efficient techniques for type checking and dictionary
                 conversion. A number of optimizations and extensions to
                 the basic type class system are also described.",
  note =         "89791 598.Published as SIGPLAN Notices, volume 28,
                 number 6",
}


@InProceedings{Jones:1994:Dictionary-FreeOverloading,
  author =       "M. P. Jones",
  title =        "Dictionary-Free Overloading by Partial Evaluation",
  booktitle =    "Partial Evaluation and Semantics-Based Program
                 Manipulation, Orlando, Florida, June 1994 (Technical
                 Report 94/9, Department of Computer Science, University
                 of Melbourne)",
  year =         1994,
  pages =        "107--117",
}
@Article{Jones:1995:Dictionary-Free,
  author =       "M. Jones",
  title =        "Dictionary-Free Overloading by Partial Evaluation",
  journal =      "Lisp and Symbolic Computation",
  year =         1995,
  volume =       8,
  number =       3,
  pages =        "229--248",
  month =        sep,
  url =          "ftp://nebula.systemsz.cs.yale.edu/pub/yale-fp/papers/pepm94.ps.Z",
}


@InProceedings{BudiuSWG2000,
  author = 	 {Mihai Budiu and Majd Sakr and Kip Walker and Seth Copen Goldstein},
  title = 	 {{BitValue} Inference: Detecting and Exploiting Narrow Bitwidth Computations},
  pages =        "969--979",
  booktitle = 	 EuroPar2000,
  year =	 2000,
  address =	 EuroPar2000addr,
  month =	 EuroPar2000date
}

@PhdThesis{Razdan94,
  author = 	 {Rahul Razdan},
  title = 	 {{PRISC}: Programmable Reduced Instruction Set Computers},
  school = 	 {Harvard University},
  year = 	 1994,
  month =	 may
}

